<UserControl x:Class="Liquinator.Views.FlavourView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Liquinator.Views"
             xmlns:validationRules="clr-namespace:Liquinator.ValidationRules"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:models="clr-namespace:Liquinator.Models"
             xmlns:controls="clr-namespace:Liquinator.Controls"
             xmlns:viewModels="clr-namespace:Liquinator.ViewModels"
             mc:Ignorable="d" 
             TextElement.Foreground="{DynamicResource MaterialDesignBody}"
             TextElement.FontWeight="Regular"
             TextElement.FontSize="13"
             TextOptions.TextFormattingMode="Ideal" 
             TextOptions.TextRenderingMode="Auto"        
             Background="{DynamicResource MaterialDesignPaper}"
             FontFamily="FontFamily=pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto"
             DataContext="{DynamicResource FlavourViewModel}"
             d:DesignHeight="500" d:DesignWidth="500">
    <UserControl.Resources>
        <viewModels:FlavourViewModel x:Key="FlavourViewModel" />
    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0.9*"/>
            <ColumnDefinition Width="2*"/>
        </Grid.ColumnDefinitions>
        <!--Dialog-->
        <materialDesign:DialogHost IsOpen="{Binding IsDialogHostOpen}" Grid.Column="1" 
                                           HorizontalAlignment="Center" VerticalAlignment="Center">
            <materialDesign:DialogHost.DialogContent>
                <controls:DialogEditFlavour DataContext="{Binding Source={StaticResource FlavourViewModel}}"/>
            </materialDesign:DialogHost.DialogContent>
        </materialDesign:DialogHost>
        <!--DataGrid for flavours-->
        <Grid Grid.Column="1">
            <DataGrid Margin="8" ItemsSource="{Binding Flavours}" x:Name="DataGridFlavours"
                              CanUserSortColumns="True" CanUserAddRows="False" 
                              AutoGenerateColumns="False" materialDesign:DataGridAssist.CellPadding="13 8 8 8"
                              materialDesign:DataGridAssist.ColumnHeaderPadding="8"
                              IsReadOnly="True" SelectedItem="{Binding SelectedFlavour}">
                <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding Name}" Header="Nazwa"
                                                EditingElementStyle="{DynamicResource MaterialDesignDataGridTextColumnEditingStyle}"/>
                    <DataGridTextColumn Binding="{Binding Company}" Header="Firma"
                                                EditingElementStyle="{DynamicResource MaterialDesignDataGridTextColumnEditingStyle}"/>
                    <DataGridTextColumn Binding="{Binding Shop}" Header="Sklep"
                                                EditingElementStyle="{DynamicResource MaterialDesignDataGridTextColumnEditingStyle}"/>
                    <DataGridTextColumn Binding="{Binding Amount}" Header="Ilość(ml)"
                                                EditingElementStyle="{DynamicResource MaterialDesignDataGridTextColumnEditingStyle}"/>
                    <DataGridTemplateColumn Header="Ilość">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate DataType="models:Flavour">
                                <ProgressBar Foreground="{DynamicResource SecondaryAccentBrush}" Maximum="100" Minimum="0" Value="{Binding Amount }"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>

                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
        <StackPanel Grid.Column="0" Orientation="Vertical" Margin="8">
            <StackPanel.Resources>
                <!--Style for AddButton(role: disabling button when validation fails)-->
                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}" x:Key="AddButtonStyle">
                    <Setter Property="IsEnabled" Value="False"/>
                    <Setter Property="Background" Value="{DynamicResource SecondaryAccentBrush}"></Setter>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=NameTextBox}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ShopTextBox}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=CompanyTextBox}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=AmountTextBox}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsEnabled" Value="True"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Resources>
            <TextBlock Text="Add flavour:"
                               Style="{DynamicResource MaterialDesignHeadlineTextBlock}"/>
            <!--AddFlavour TextBoxes-->
            <TextBox x:Name="NameTextBox" materialDesign:HintAssist.Hint="Name"  
                             Width="140" Margin="8 0 8 14">
                <TextBox.Text>
                    <Binding Path="Name" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validationRules:NotEmptyValidationRule ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <TextBox x:Name="CompanyTextBox" materialDesign:HintAssist.Hint="Company" Width="140" Margin="8 0 8 14">
                <TextBox.Text>
                    <Binding Path="Company" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validationRules:NotEmptyValidationRule ValidatesOnTargetUpdated="True"></validationRules:NotEmptyValidationRule>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <TextBox x:Name="ShopTextBox" materialDesign:HintAssist.Hint="Shop" Width="140" Margin="8 0 8 14">
                <TextBox.Text>
                    <Binding Path="Shop" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validationRules:NotEmptyValidationRule ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <TextBox x:Name="AmountTextBox" materialDesign:HintAssist.Hint="Amount" Width="140" Margin="8 0 8 14">
                <TextBox.Text>
                    <Binding Path="Amount" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validationRules:DoubleValidationRule ValidatesOnTargetUpdated="True"></validationRules:DoubleValidationRule>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <Button Style="{StaticResource AddButtonStyle}" 
                            x:Name="AddButton"
                            Content="ADD" Width="100" Height="30" 
                            Margin="9 9 20 9" HorizontalAlignment="Right"
                            Command="{Binding AddFlavourCommand}"/>
            <Button x:Name="UpdateButton" Content="UPDATE" Style="{DynamicResource MaterialDesignRaisedAccentButton}"
                            Margin="9 9 20 9" Width="100" Height="30" 
                            HorizontalAlignment="Right"
                            Command="{Binding OpenDialogCommand}"
                            IsEnabled="{Binding IsEditButtonEnable}"/>
        </StackPanel>
    </Grid>
</UserControl>
